/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package librarywtable;

import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTextField;

/**
 *
 * @author DoÄŸukann
 */
public class LibraryWTableJFrame extends javax.swing.JFrame {
    
    
/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}}
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryWTableJFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryWTableJFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryWTableJFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryWTableJFrame.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryWTableJFrame().setVisible(true);
            }
        });
    }

    /**
     * Creates new form LibraryWTableJFrame
     */
    public LibraryWTableJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBooks = new javax.swing.JTable();
        btnAdder = new javax.swing.JButton();
        txtBorrower = new javax.swing.JTextField();
        txtPublisher = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPage = new javax.swing.JTextField();
        txtAuthor = new javax.swing.JTextField();
        btnDelate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnUpdate2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(153, 255, 204));
        setBounds(new java.awt.Rectangle(200, 200, 300, 300));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(250, 250));
        setSize(new java.awt.Dimension(0, 0));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblBooks.setBackground(new java.awt.Color(204, 255, 204));
        tblBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book Number", "Book Name", "Book Page", "Author", "Publisher", "Borrower"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBooksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBooks);

        btnAdder.setText("Add");
        btnAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdderActionPerformed(evt);
            }
        });

        txtBorrower.setBackground(new java.awt.Color(0, 204, 204));

        txtPublisher.setBackground(new java.awt.Color(0, 204, 204));

        lblName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblName.setText("Book Name");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Book Page");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Book Author");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Publisher");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Borrower");

        txtPage.setBackground(new java.awt.Color(0, 204, 204));

        txtAuthor.setBackground(new java.awt.Color(0, 204, 204));
        txtAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuthorActionPerformed(evt);
            }
        });

        btnDelate.setText("Delete ");
        btnDelate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelateActionPerformed(evt);
            }
        });

        jLabel1.setText("SEARCH BOOK");

        txtFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFilterMouseClicked(evt);
            }
        });
        txtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterActionPerformed(evt);
            }
        });
        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterKeyReleased(evt);
            }
        });

        txtName.setBackground(new java.awt.Color(0, 204, 204));

        jLabel6.setBackground(new java.awt.Color(153, 255, 153));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 51));
        jLabel6.setText("LIBRARY  INFORMATION SYSTEM");

        btnUpdate2.setText("Update");
        btnUpdate2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPage)
                            .addComponent(txtName)
                            .addComponent(txtAuthor)
                            .addComponent(txtPublisher)
                            .addComponent(txtBorrower, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnUpdate2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelate)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBorrower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelate)
                            .addComponent(btnAdder)
                            .addComponent(btnUpdate2))
                        .addGap(146, 146, 146))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdderActionPerformed

        if (txtName.getText().equals(" ") || txtAuthor.getText().equals("") || txtBorrower.getText().equals("") || txtPublisher.getText().equals("")
                || txtBorrower.getText().equals("")) {

            JOptionPane.showMessageDialog(this, "PLEASE ENTER DATA");

        } else {
            DefaultTableModel model = (DefaultTableModel) tblBooks.getModel();
            int b = model.getRowCount();

            model.addRow(new Object[]{b + 1, txtName.getText(), txtPage.getText(), txtAuthor.getText(), txtPublisher.getText(), txtBorrower.getText()});

        }

        DefaultTableModel model = (DefaultTableModel) tblBooks.getModel();

        String bookName, author, publisher, borrower;
        int bookPage;
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:54537;databaseName=deepkonsey;encrypt=true;trustServerCertificate=true", "dogukan", "596400");

            bookName = txtName.getText();
            author = txtAuthor.getText();
            publisher = txtPublisher.getText();
            bookPage = Integer.parseInt(txtPage.getText());
            borrower = txtBorrower.getText();

            String query = "insert into LibraryDK1(BookName,BookPage,Publisher,Author,Borrower)values(?,?,?,?,?)";

            PreparedStatement preparedStatement = con.prepareCall(query);
            preparedStatement.setString(1, bookName);
            preparedStatement.setString(4, author);
            preparedStatement.setString(3, publisher);
            preparedStatement.setInt(2, bookPage);
            preparedStatement.setString(5, borrower);

            preparedStatement.executeUpdate();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Book Could Not Saved");
        }
        txtName.setText(" ");
        txtAuthor.setText(" ");
        txtBorrower.setText(" ");
        txtPage.setText(" ");
        txtPublisher.setText(" ");

    }//GEN-LAST:event_btnAdderActionPerformed

    private void btnDelateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelateActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Are you sure deleting", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) tblBooks.getModel();
            int row = tblBooks.getSelectedRow();
            if (row != -1) {

                try {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                    Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:54537;databaseName=deepkonsey;encrypt=true;trustServerCertificate=true", "dogukan", "596400");
                    String value = (tblBooks.getModel().getValueAt(row, 0).toString());
                    String query = "delete from LibraryDK1 where BookNumber=" + value;

                    PreparedStatement preparedStatement = con.prepareCall(query);

                    preparedStatement.executeUpdate();
                } catch (Exception e) {

                    e.printStackTrace();
                    System.out.println("Book Could Not Saved");
                }
            } else {
                JOptionPane.showMessageDialog(this, "THERE IS NOT SELECTED ROW");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Deleting Canceled");
        }

        DefaultTableModel dm = (DefaultTableModel) tblBooks.getModel();
        while (dm.getRowCount() > 0) {
            dm.removeRow(0);
        }

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:54537;databaseName=deepkonsey;encrypt=true;trustServerCertificate=true", "dogukan", "596400");

            Statement st = con.createStatement();
            String sql = "select *from LibraryDK1";
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                String bookNumber = String.valueOf(rs.getInt("BookNumber"));
                String bookName = rs.getString("BookName");
                String author = rs.getString("Author");
                String publisher = rs.getString("Publisher");
                String bookPage = String.valueOf(rs.getInt("BookPage"));
                String borrower = rs.getString("Borrower");

                String tbData[] = {bookNumber, bookName, bookPage, author, publisher, borrower};
                DefaultTableModel dtm = (DefaultTableModel) tblBooks.getModel();
                dtm.addRow(tbData);

            }

            con.close();
        } catch (Exception e) {
            e.printStackTrace();

        }


            }//GEN-LAST:event_btnDelateActionPerformed

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        DefaultTableModel model = (DefaultTableModel) tblBooks.getModel();
        TableRowSorter<DefaultTableModel> filter = new TableRowSorter<>(model);
        tblBooks.setRowSorter(filter);
filter.setRowFilter(RowFilter.regexFilter(txtFilter.getText()));    }//GEN-LAST:event_txtFilterKeyReleased

    private void btnUpdate2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate2ActionPerformed

        DefaultTableModel model = (DefaultTableModel) tblBooks.getModel();

        String bookName, author, publisher, borrower;
        int bookPage;

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:54537;databaseName=deepkonsey;encrypt=true;trustServerCertificate=true", "dogukan", "596400");
            int row = tblBooks.getSelectedRow();
            String value = (tblBooks.getModel().getValueAt(row, 0).toString());
            String query = "Update LibraryDK1 set BookName=? ,Author=? ,Publisher=? ,BookPage=? ,Borrower=? where BookNumber=" + value;

            bookName = txtName.getText();
            author = txtAuthor.getText();
            publisher = txtPublisher.getText();
            bookPage = Integer.parseInt(txtPage.getText());
            borrower = txtBorrower.getText();

            PreparedStatement preparedStatement = con.prepareCall(query);
            preparedStatement.setString(1, bookName);
            preparedStatement.setString(2, author);
            preparedStatement.setString(3, publisher);
            preparedStatement.setInt(4, bookPage);
            preparedStatement.setString(5, borrower);

            preparedStatement.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Book Could Not Saved");
        }

        DefaultTableModel dm = (DefaultTableModel) tblBooks.getModel();

        while (dm.getRowCount()
                > 0) {
            dm.removeRow(0);
        }

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:54537;databaseName=deepkonsey;encrypt=true;trustServerCertificate=true", "dogukan", "596400");

            Statement st = con.createStatement();
            String sql = "select *from LibraryDK1";
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                String bookNumber = String.valueOf(rs.getInt("BookNumber"));
                String bookName1 = rs.getString("BookName");
                String author1 = rs.getString("Author");
                String publisher1 = rs.getString("Publisher");
                String bookPage1 = String.valueOf(rs.getInt("BookPage"));
                String borrower1 = rs.getString("Borrower");

                String tbData[] = {bookNumber, bookName1, bookPage1, author1, publisher1, borrower1};
                DefaultTableModel dtm = (DefaultTableModel) tblBooks.getModel();
                dtm.addRow(tbData);

            }

            con.close();
        } catch (Exception e) {
            e.printStackTrace();

        }

    

    }//GEN-LAST:event_btnUpdate2ActionPerformed

    private void txtAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuthorActionPerformed

    private void tblBooksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBooksMouseClicked

 int row = tblBooks.getSelectedRow();

        String c1 = String.valueOf(tblBooks.getValueAt(row, 1));
        txtName.setText(c1);
        String c2 = String.valueOf(tblBooks.getValueAt(row, 2));
        txtPage.setText(c2);
        String c3 = String.valueOf(tblBooks.getValueAt(row, 3));
        txtAuthor.setText(c3);
        String c4 = String.valueOf(tblBooks.getValueAt(row, 4));
        txtPublisher.setText(c4);
        String c5 = String.valueOf(tblBooks.getValueAt(row, 5));
        txtBorrower.setText(c5);
    }//GEN-LAST:event_tblBooksMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void txtFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFilterMouseClicked

         

    }//GEN-LAST:event_txtFilterMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:54537;databaseName=deepkonsey;encrypt=true;trustServerCertificate=true", "dogukan", "596400");

            Statement st = con.createStatement();
            String sql = "select *from LibraryDK1";
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                String bookNumber = String.valueOf(rs.getInt("BookNumber"));
                String bookName = rs.getString("BookName");
                String author = rs.getString("Author");
                String publisher = rs.getString("Publisher");
                String bookPage = String.valueOf(rs.getInt("BookPage"));
                String borrower = rs.getString("Borrower");

                String tbData[] = {bookNumber, bookName, bookPage, author, publisher, borrower};
                DefaultTableModel dtm = (DefaultTableModel) tblBooks.getModel();
                dtm.addRow(tbData);

            }

            con.close();
        } catch (Exception e) {
            e.printStackTrace();

        }    }//GEN-LAST:event_formWindowOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdder;
    private javax.swing.JButton btnDelate;
    private javax.swing.JButton btnUpdate2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable tblBooks;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBorrower;
    private javax.swing.JTextField txtFilter;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPage;
    private javax.swing.JTextField txtPublisher;
    // End of variables declaration//GEN-END:variables

}
